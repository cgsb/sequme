(** Illumina specific features. *)

(** Tiles are sub-sections of flowcells. *)
module Tile : sig
  exception Error of string

  type surface = Top | Bottom

  type t = private {
    surface : surface;
    swath : int; (** 1, 2, or 3 *)
    tile_num : int; (** 1 - 99, but usually 1 - 8 *)
  }

  val of_string_exn : string -> t
    (** E.g. [of_string_exn "2304"] parses to
        - surface = Bottom
        - swath = 3
        - tile_num = 4
    *)

  val to_string : t -> string
    (** Inverse of [of_string_exn]. *)

end

(** Features specific to Illumina FASTQ files. Meant to be used in
    conjunction with the {!Biocaml.Fastq} module. *)
module Fastq : sig
  exception Error of string

  type sequence_id = {
    instrument : string;
    run_number : int;
    flowcell_id : string;
    lane : int;
    tile : Tile.t;
    x_pos : int;
    y_pos : int;
    read : int;
    is_filtered : bool;
    control_number : int;
    index : string
  }

  val sequence_id_of_string : string -> sequence_id
    (** Parse sequence ID in string format, as generated by
        {!Biocaml.Fastq}, according to the format followed by Illumina. *)

end

(** Barcodes. *)
module Barcode : sig
  exception Error of string
  type t
  val of_int : int -> t
  val of_ad_code : string -> t
  val of_seq : string -> t
  val to_ad_code : t -> string
  val to_seq : t -> string
end


(** Support for [SampleSheet]s. *)
module SampleSheet : sig
  exception Error of string

  type record = {
    flowcell_id : string;
    lane : int;
    sample_id : string;
    sample_ref : string;
    barcode : string;
    description : string;
    control : bool;
    recipe : string;
    operator : string;
    project : string
  }

  type t = record list

  val of_file : string -> t
  val group_by_sample_id : t -> record list Core.Std.String.Map.t
  val find_lane_barcode : t -> int -> Barcode.t -> record option
end


