#!/usr/bin/env bash

usage() {
    echo "usage: $0 {help, configure, boot, init, packages, hitscore, ocsigen}"
}

if [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "" ]; then
    usage
    exit 0
fi

if [ "$1" = "help" ]; then
    usage
    echo ""
    echo "Yeah … use them in that order, some of them will ask for more arguments."
    echo "The boot one is going to compile OCaml, the packages one a lot of stuff also."
    echo "The ocsigen one compiles OClosure so the computer may become irresponsive for a while."
    exit 0
fi


OCAML_ENV=$HOME/.ocaml.env

if [ "$1" = "configure" ]; then

    if [ "$2" = "" ] ; then
        echo "usage: $0 configure PREFIX [COMPUTER]"
        echo "Where COMPUTER may be 'bowery', 'rabbot'"
        exit 1
    fi
    the_prefix=$2
    the_computer=$3
        
    echo "Using OCAMLPREFIX: $the_prefix"
    OUT=$OCAML_ENV

    rm -f $OUT

    if [ "$the_computer" = "bowery" ] ; then
        echo 'unset ARCHIVE' >> $OUT
        echo '. /share/apps/git/1.7.6.3/intel/env.sh' >> $OUT
        echo 'module add postgresql' >> $OUT
        echo 'module add sqlite' >> $OUT
    fi
    if [ "$the_computer" = "rabbot" ] ; then
        echo 'module () { ' >> $OUT
        echo '    eval `/opt/modules/bin/modulecmd bash $*`' >> $OUT
        echo '}' >> $OUT
        echo 'module load git' >> $OUT
        echo 'module load postgresql' >> $OUT
    fi
    echo "export OCAMLPREFIX=$the_prefix" >> $OUT
#    echo 'export OPAM_BAR=$HOME/.opambar' >> $OUT
    echo 'export PATH=$OCAMLPREFIX/bin:${PATH}' >> $OUT
    echo 'export MANPATH=$OCAMLPREFIX/share/man:${MANPATH}' >> $OUT
    echo 'eval `opam config -env` # opam_profile_line' >> $OUT
    echo 'export OCAMLPATH=$OCAMLPREFIX/lib/ocaml:${OCAMLPATH}' >> $OUT
    echo 'export OCAMLFIND_DESTDIR=$OCAMLPREFIX/lib/ocaml' >> $OUT

    echo 'alias ocaml="ledit -h ~/.ocaml_history -u -l 200 ocaml"' >> $OUT

    echo "Add  . $OUT   to your bashrc or so"

    exit 0

fi


. $OCAML_ENV
export WGET="wget --no-check-certificate"

if [ "$1" = "boot" ]; then

    
    tmp_dir=/tmp/bootopam$$
    mkdir -p $tmp_dir

    rm -fr $OCAML_BOOTSTRAP
    mkdir -p $OCAML_BOOTSTRAP
    
    echo "Working in $tmp_dir"
    cd $tmp_dir
    
    ocaml_name=ocaml-4.00.1
    ocaml_url=http://caml.inria.fr/pub/distrib/ocaml-4.00/$ocaml_name.tar.bz2
    
    $WGET $ocaml_url
    
    tar xvfj $ocaml_name.tar.bz2
    
    cd $ocaml_name

    ./configure -prefix $OCAMLPREFIX
   
    make world > world.log 2>&1
    make opt > opt.log 2>&1
    make opt.opt > optopt.log 2>&1
    
    make install
    
    cd ..
    
    
    $WGET https://github.com/OCamlPro/opam/tarball/0.7.7 -O opam.tgz
    tar xvfz opam.tgz
    cd OCamlPro-opam-*
    ./configure --prefix $OCAMLPREFIX
    make
    make opt
    make install
    
    echo "Deleting $tmp_dir"
    rm -fr $tmp_dir

    echo "Making opam script"
    mv $OCAMLPREFIX/bin/opam $OCAMLPREFIX/bin/opam.opt
    os=$OCAMLPREFIX/bin/opam
    echo "#! /bin/sh" > $os
    echo "unset OCAMLFIND_DESTDIR" >> $os
    echo "unset OCAMLFIND_LDCONF" >> $os
    echo 'opam.opt $*' >> $os
    chmod a+x $os

    echo "Making toplevel script"
    mv $OCAMLPREFIX/bin/ocaml $OCAMLPREFIX/bin/ocamltop
    os=$OCAMLPREFIX/bin/ocaml
    echo "#! /bin/sh" > $os
    echo 'ocamltop -I $OCAML_TOPLEVEL_PATH $*' >> $os
    chmod a+x $os
    
fi;

if [ "$1" = "init" ]; then

    echo Init
    opam init
    echo Change remote
    opam remote -rm default
    opam remote -add custom git://github.com/smondet/opam-repository.git
    echo Upgrade
    opam --yes upgrade
fi


## if [  "$1" = "compiler" ]; then
##     before_opam
##     opam upgrade
##     opam switch 3.12.1
##     opam switch -remove system
##     echo "Deleting $OCAML_BOOTSTRAP"
##     rm -fr $OCAML_BOOTSTRAP
## fi
    
if [ "$1" = "packages" ]; then
    opam --yes install lwt ssl core core_extended omake oasis xmlm batteries ledit && \
    opam --yes install camlzip sqlite3-ocaml getopt && \
    opam --yes install pgocaml && \
    opam --yes install cryptokit && \
    opam --yes install simple_pam && \
        echo "All OK !"
fi

do_smth () {
    tmp1=`mktemp`
    ($1) > $tmp1 2>&1
    if [ $? -ne 0 ]; then
        echo "$1 ---> Not 0 (`cat $tmp1`)"
        tmp3=`mktemp`
        eval "$2" > $tmp3 2>&1
        tmp2=`mktemp`
        $1 > $tmp2 2>&1
        if [ $? -ne 0 ]; then
            echo "$1 ---> Not 0 Again (`cat $tmp2`)\n  and $2 said\n (`cat $tmp3`)\n"
            exit 2
        else
            echo "$1 ----> SUCCESS!"
        fi
    else
        echo "$1  ------>  OK!"
    fi
}

if [ "$1" = "hitscore" ] ; then

    if [ "$2" = "" ] || [ "$2" = "-help" ] || [ "$2" = "-h" ] ; then
        echo "usage: $0 hitscore  /path/to/put/stuff/in [INSTALL_PREFIX]"
        echo "(default INSTALL_PREFIX: $HOME/usr"
        exit 1
    fi
    if [ "$4" = "http" ] ; then
        BIOCAML_GIT=http://github.com/biocaml/biocaml.git
        SEQUME_GIT=https://github.com/agarwal/sequme.git
        HITSCORE_GIT=https://github.com/agarwal/hitscore
    else
        BIOCAML_GIT=git@github.com:biocaml/biocaml
        SEQUME_GIT=git@github.com:agarwal/sequme
        HITSCORE_GIT=git@github.com:agarwal/hitscore
    fi


    mkdir -p $2
    cd $2
    do_smth "ls $2/biocaml/src/lib/biocaml.ml" "
git clone $BIOCAML_GIT  && \
cd biocaml && \
git checkout --track origin/v0.2 && \
make setup.ml && \
echo 'ocaml setup.ml -configure --prefix $OCAMLPREFIX --enable-apps \
       --enable-lwt --enable-tests' > full_config && sh full_config && \
make all doc install
"
    cd $2
    do_smth "ls $2/sequme/src/lib/sequme_flow.ml" "
git clone $SEQUME_GIT && \
cd sequme && \
make setup && \
ocaml setup.ml -configure --prefix $OCAMLPREFIX && \
make all doc install
"
    cd $2
    do_smth "ls $2/hitscore/src/lib/hitscore.ml" "
git clone $HITSCORE_GIT && \
cd hitscore && \
git checkout -t origin/client_server && \
ocaml setup.ml -configure --prefix $OCAMLPREFIX && \
make all doc install
"

        

fi

if [ "$1" = "ocsigen" ]; then
    
    opam install oclosure eliom
    
##     # TODO:  try normal bundle and use same  directories for biocaml/hs/hsw/...
## #    opam install eliom
##     SCRATCH=$HOME/tmp/install-ocsigen
##     OCSIGEN_BUNDLE=ocsigen-bundle-2.2.2
##     OCSIGEN_URL=http://ocsigen.org/download/$OCSIGEN_BUNDLE.tar.gz
##     PREFIX=$HOME/.opambar
## 
##     rm -fr $SCRATCH/$OCSIGEN_BUNDLE
##     mkdir -p $SCRATCH
##     cd $SCRATCH
## 
##     if [ -f $SCRATCH/$OCSIGEN_BUNDLE.tar.gz ] ; then
##         echo "$SCRATCH/$OCSIGEN_BUNDLE.tar.gz already there"
##     else
##         $WGET $OCSIGEN_URL
##     fi
##     tar xfz $OCSIGEN_BUNDLE.tar.gz
##     cd $OCSIGEN_BUNDLE
## 
##     ./configure --prefix $PREFIX \
##         OCSIGEN_USER=${USER} OCSIGEN_GROUP=${USER}  \
##         --enable-lwt-dev \
##         --enable-oclosure --with-ocamldsort
##     make clean
##     make pull && make && make install
    
fi



